""" 
Module errors.py

Remarks
-------
In Python, all exceptions must be instances of a class that derives from
`BaseException`. 
The built-in exceptions can be generated by the interpreter or
built-in functions. Except where mentioned, they have an “associated value”
indicating the detailed cause of the error. This may be a string or a tuple of
several items of information (e.g., an error code and a string explaining the
code). The associated value is usually passed as arguments to the exception
class’s constructor. For more information, see [Built-in Exceptions](https://docs.python.org/3/library/exceptions.html#built-in-exceptions).
See also [Exception hierarchy](https://docs.python.org/3/library/exceptions.html#exception-hierarchy).

"""
import sys

class ExceptionSamples:

    def raise_type_exception(self):
        """ 
        Raises a TypeError exception.
        
        Remarks
        -------

        Python has different types. In this example, the value assigned to `a`
        is of string type (i.e., text) while the value of `b` is an integer
        (i.e., whole number),

        You cannot add strings with integers, otherwise you get the following
        error: `TypeError: can only concatenate str (not "int") to str`.
        
        Therefore, you need to convert the string to an integer using the
        `int()` built-in function. The correct statement is `print(int(a) + b)`.

        Raised when an operation or function is applied to an object of
        inappropriate type. The associated value is a string giving details
        about the type mismatch.

        This exception may be raised by user code to indicate that an attempted
        operation on an object is not supported, and is not meant to be.  For
        more information, see [exception
        TypeError](https://docs.python.org/3/library/exceptions.html#TypeError).

        """
        a = "1" # This is a string.
        b = 2 # This is an integer. 

        # Example 1
        try:
            # The following statement mixes string and integer types. 
            print(a + b)
        except Exception as error:
            print(f"Example 1 - {type(error).__name__} was raised: {error}") 
        finally: 
            # Transform integer to string to fix the problem.
            print(f'Tranforming int to str fix the problem: {a+str(2)}')

        # Example 2
        try:
            firstname = input("Enter first name: ")
            lastname = input("Enter second name: ")
            print("Your first name is %s and your second name is %s" % firstname, lastname)
        except Exception as error:
            print(f"Example 2 - {type(error).__name__} was raised: {error}") 
        finally: 
            # Pass values inside a tuple to fix the problem.
            print("Pass values as a tuple. Your first name is %s and your last name is %s" % (firstname, lastname))

    def raise_name_exception(self):
        """ 
        Raises a NameeError exception.
        
        Remarks
        -------

        In this exampe you get the error that `math` is not defined, that means
        math is not in the default namespace. You could easily find out that
        `math` is a module, so you simply need to do `import math`.  

        The exception `NameError` is raised when a local or global name is not
        found. This applies only to unqualified names. The associated value is
        an error message that includes the name that could not be found.

        The name attribute can be set using a keyword-only argument to the
        constructor. When set it represent the name of the variable that was
        attempted to be accessed. For more information, see [exception
        `NameError`](https://docs.python.org/3/library/exceptions.html#NameError).

        """ 

        try:
            # The following statement uses the math library 
            # which is not imported. 
            square = math.sqrt(9)
        except Exception as error:
            print(f"{type(error).__name__} was raised: {error}") 


    def raise_attribute_exception(self):
        """ 
        Raises an AttributeError exception.
        
        Remarks
        -------

        This example uses the incorrect attribute 'cosine'; it should be `cos`
        instead.  To find the correct attribute in a terminal do the following:
      
        1. activate `python`.
        1. \>>> import math
        1. \>>> dir(math) 
        1. \>>> help(math.cos)  

        Raised when an attribute reference (see Attribute references) or
        assignment fails. (When an object does not support attribute references
        or attribute assignments at all, TypeError is raised.)

        For more information, see [exception
        AttributeError](https://docs.python.org/3/library/exceptions.html#AttributeError). 

        """
        try:
            # The following statement uses incorrect attribute 'cosine'; 
            # it should be `cos` instead.  
            import math
            cosine = math.cosine(1)
        except Exception as error:
            print(f"{type(error).__name__} was raised: {error}") 

    def raise_file_not_found_exception(self):
        """ 
        Raises a FileNotFoundError exception.
        
        Remarks
        -------

        Raised when a file or directory is requested but does not exist.

        For more information, see [exception FileNotFoundError](https://docs.python.org/3/library/exceptions.html#FileNotFoundError). 

        """
        try:
            # The following statement tries to open a non exisiting file.
            file_path = "dummy.txt"
            f = open(file_path, 'r') 
        except Exception as error:
            print(f"{type(error).__name__} was raised: {error}") 


    def raise_EOF_exception(self):
        """
        Raises an EOFError exception. 
        
        Remarks
        -------
        The EOFError can be used when a program is expecting input from the user
        and the user enters an end-of-file character (Ctrl-D on Unix, Ctrl-Z on
        Windows).

        For more information, see [exception EOFError](https://docs.python.org/3/library/exceptions.html#EOFError). 
        """
        try:
            input("Enter some text. Enter Cntl-Z (windows) or Cntl-D (Unix) to raise EOF exception: ")
        except Exception as error:
            print(f"{type(error).__name__} was raised: {error}") 

        finally: 
            # Pass values inside a tuple to fix the problem.
            print("When you enter an end-of-file character (Ctrl-D on Uunix, Ctrl-Z on Windows) an EOF exception is raised.")